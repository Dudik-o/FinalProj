module "eks" {
  source          = "terraform-aws-modules/eks/aws"
  version         = "17.24.0"
  cluster_name    = var.cluster_name
  cluster_version = var.kubernetes_version
  subnets         = module.infra.private_subnets_id

  enable_irsa = true

  tags = {
    Environment            = "training"
    GithubRepo             = "terraform-aws-eks"
    GithubOrg              = "terraform-aws-modules"
    Project                = var.project_tag
    cluster_create_timeout = "50m"
  }

  vpc_id = module.infra.vpc_id

  worker_groups = [
    {
      name                          = "worker-group-1"
      instance_type                 = "t3.medium"
      additional_userdata           = "echo foo bar"
      asg_desired_capacity          = 2
      additional_security_group_ids = [aws_security_group.all_worker_mgmt.id]
    },
    {
      name                          = "worker-group-2"
      instance_type                 = "t3.large"
      additional_userdata           = "echo foo bar"
      asg_desired_capacity          = 2
      additional_security_group_ids = [aws_security_group.all_worker_mgmt.id]
    }
  ]

  map_roles = [{
    rolearn  = aws_iam_role.jenkins_role.arn
    username = "system:node:{{EC2PrivateDNSName}}"
    groups   = ["system:masters"]
  }]
  manage_aws_auth = true
}


data "aws_eks_cluster" "eks" {
  name = module.eks.cluster_id
}

data "aws_eks_cluster_auth" "eks" {
  name = module.eks.cluster_id
}

resource "aws_security_group" "all_worker_mgmt" {
  name_prefix = "all_worker_management"
  vpc_id      = module.infra.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


#output "kubectl_config" {
#  description = "kubectl config as generated by the module."
#  value       = module.eks.kubeconfig
#}

#output "config_map_aws_auth" {
#  description = "A kubernetes configuration to authenticate to this EKS cluster."
#  value       = module.eks.config_map_aws_auth
#}